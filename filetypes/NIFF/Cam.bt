// -*- mode: c;-*-
enum <uint> CAM_TYPE {
    PERSP = CAM_TYPE_PERSP,
    ORTHO = CAM_TYPE_ORTHO
};

typedef struct( uint64 size ){
    // @TODO: Validate against ExternalNameList
    uint external_lookat_obj_file_name_index;
    uint external_lookat_obj_name_index;
    uint external_eye_obj_file_name_index;
    uint external_eye_obj_name_index;
    uint external_up_obj_file_name_index;
    uint external_up_obj_name_index;
    // since we can be variable size,
    // block out all unknown data
    local uint64 size_of_the_unknown = size - (FTell() - startof(this));
    if( size_of_the_unknown > 0 ){
        ubyte unknown[size_of_the_unknown];
    }
} NIFF_NEB_Cam;


typedef struct {
    uint cam_tag;
    Assert( cam_tag == TAG_CAM, "Invalid NIFF_Cam: Wrong Tag" );
    uint this_cam_index;
    uint cam_size;
    // @TODO: Validate against NameList
    uint cam_name_index;
    CAM_TYPE cam_type;
    float cam_near_clip;
    float cam_far_clip;
    float cam_right_clip;
    float cam_left_clip;
    float cam_top_clip;
    float cam_bottom_clip;
    float cam_fovy;
    float cam_aspect;
    float cam_scale;
    // @TODO: Validate against ObjList
    uint cam_lookat_obj;
    // @TODO: Validate against ObjList
    uint cam_eye_obj;
    // @TODO: Validate against ObjList
    uint cam_up_obj;
    uint nintendo_extension_block_size;
    uint user_extension_block_size;
    if( nintendo_extension_block_size != NINTENDO_EXT_BLOCK_NONE ){
        NIFF_NEB_Cam nintendoExtensionBlock(nintendo_extension_block_size);
    }
    if( user_extension_block_size != USER_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic userExtensionBlock(user_extension_block_size);
    }
} NIFF_Cam;

typedef struct {
    uint cam_list_tag;
    Assert( cam_list_tag == TAG_CAM_LIST, "Invalid NIFF_CamListHeader: Wrong Tag" );
    uint cam_list_header_size;
    uint cam_list_size;
    uint cam_num;
    uint nintendo_extension_block_size;
    uint user_extension_block_size;
    uint cam_num_byte[cam_num];
} NIFF_CamListHeader;

typedef struct {
    NIFF_CamListHeader header;
    Assert( header.cam_list_header_size == sizeof(header), "Invalid NIFF_CamListHeader: Size Mismatch" );
    NIFF_Cam cams[header.cam_num]<optimize=false>;
    local uint64 i;
    local string warn;
    local string thisName;
    for( i = 0; i < header.cam_num; i++ ){
        SPrintf( thisName, "Invalid NIFF_Cam[%d]: ", i );

        SPrintf( warn, "%sSize Mismatch: Actual != Header", thisName );
        Assert( header.cam_num_byte[i] == sizeof(cams[i]), warn );
        SPrintf( warn, "%sSize Mismatch: Actual != Internal", thisName );
        Assert( cams[i].cam_size == sizeof(cams[i]), warn );
        SPrintf( warn, "%sSize Mismatch: Header != Internal", thisName );
        Assert( header.cam_num_byte[i] == cams[i].cam_size, warn );
        SPrintf( warn, "%sIndex Mismatch: Header != Internal", thisName );
        Assert( i == cams[i].this_cam_index, warn );
    }
    if( header.nintendo_extension_block_size != NINTENDO_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic nintendoExtensionBlock(header.nintendo_extension_block_size);
    }
    if( header.user_extension_block_size != USER_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic userExtensionBlock(header.user_extension_block_size);
    }
} NIFF_CamList;