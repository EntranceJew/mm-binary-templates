// -*- mode: c;-*-
struct ZSceneHeader;
struct ZSceneHeaderCommand;
struct ZRoom;
struct ZScene;

void NotImplemented( ZSceneHeaderCommand &zshc ){
    local string s;
    SPrintf(s, "Incomplete Command Present: %s", ZSceneHeaderCommandRead(zshc));
    EXWarning(s);
    SetBackColor( cRed );
}

typedef struct {
    ubyte numPoints;
    ubyte zeroes[3];
    ZBankPointer off;
    if( off.zb.bankNo == 0x02 ){
        local uint64 returnTo = FTell();
        FSeek(headerStart + off.offset);
        ZVector nodes[numPoints];
        FSeek(returnTo);
    } else {
        Warning("External Bank");
    }
} ZPathList;


/*
typedef struct {
    uint startPosition; // references room start position list
    uint roomToLoad; // TODO: Find room references?
} ZEntrance;
*/

typedef struct {
    ubyte unknown[8];
} ZHC_Generic;

/*
subtypes under fire:
ZHC_Actor
* doesn't abstract the time variable in a human readable way

shorthand support list:
0x00    ZHC_StartPosList
0x01    ZHC_ActorList
...
0x04    ZHC_MapList

types under fire:
0x1E    ZHC_Unknown1E
* whatever it is, it should always supply a number of elements
* it always has a bank attached to it.
* the data it points to can't be determined due to other data
* not occupying the area densely enough

known unsupported list:
0x02    ZHC_AltCameraList
0x03    ZHC_CollisionList

...
0x0E    ZHC_TransitionActorList
0x0F    ZHC_EnvironmentList
0x10    ZHC_Time
...
0x15    ZHC_Sound
...
0x18    ZHC_AltHeaderList
...
0x19    ZHC_Camera
...
0x1B    ZHC_Unknown1B (very close)
*/

typedef struct ( ubyte &bankType ) { //ZSceneHeaderCommand
    SIBE;
	local uint breakout = 0;
    local int iters = 0;
    local uint64 hPos;
    local ubyte commandType;
	while ( breakout == 0 ){
        hPos = FTell();
        commandType = ReadUByte();
        switch(commandType){
            case 0x00:
                ZHC_StartPosList startPos;
                break;
            case 0x01:
                ZHC_ActorList actorList;
                break;
            case 0x02:
                UNK;
                ZHC_AltCameraList altCameraList;
                // MM:Cameras
                
                break;
            case 0x03:
                ZHC_CollisionList collisionList;
                break;
            case 0x04:
                ZHC_MapList mapList;
                break;
            case 0x05:
                ZHC_Wind windInfo;
                break;
            case 0x06:
                ZHC_Generic generic;
    /*
                SetBackColor( cBlue );
                NotImplemented(this);
                //local string s;
                //SPrintf(s, "Incomplete Command Present: %s", ZSceneHeaderCommandRead(this));
                //EXWarning(s);
                // Entrance List
                ubyte zeroes[3];
                ZBankPointer listOffset;
                // TODO: Expand entrance table.
                // TODO: Cross-reference number of start positions.
    */
                break;
            case 0x07:
                ZHC_Generic generic;
    /*
                SetBackColor( cDkBlue );
                // Special Objects
                ubyte zeroes[3];
                uint referenceObject;
                // TODO: Cross-reference to position in object table.
    */
                break;
            case 0x08:
                ZHC_Generic generic;
    /*
                SetBackColor( cLtBlue );
                // Room Behavior
                ubyte unknown1 : 5;
                ubyte isBossRoom : 1;
                ubyte disableAButtonJump : 1;
                ubyte disableSunSong : 1;
                ubyte zeroes[4];
                ubyte shadowTempleFlags;
                //00 - shadow temple room 1
                //01 - shadow temple rooms 0 and 2
                ubyte idleModifier;
                //00 - Link tends to stand in place and glance back at the player
                //01 - Link's cold sneeze
                //02 - Link wipes his head
                //03 - Triggers the Heat timer! Camera seems to move in and out rapidly, and ever so slightly for the "heat" effect
                //04 - Link stretches and yawns?
                //06 - ?
                //07 - Bends over and gasps for breath
                //09 - Brandishes sword even if not equipped
                //0A - Re-adjusts his tunic?
                //??
                //FF - Link hops on Epona (even as a child)
    */
                break;
            case 0x09:
                ZHC_Generic generic;
    /*
                SetBackColor( cPurple );
                ubyte idk[7];
    */
                break;
    //            return "Unused Header Command";
            case 0x0A:
                ZHC_Generic generic;
    /*
                SetBackColor( cDkPurple );
                // Mesh Definition
                ubyte zeroes[3];
                ZBankPointer listOffset;
                if( listOffset.zb.bankNo == bankType ){
                    local uint64 returnTo = FTell();
                    FSeek(headerStart + listOffset.offset);
                    //ZMeshHeader meshHead( headerStart, bankType );
                    FSeek( returnTo );
                    //breakout = 1;
                } else {
                    Printf("BOGUS %d", bankType);
                    EXWarning("External Dank");
                }
    */
                break;
    //            return "Mesh Definition";
            case 0x0B:
                ZHC_Generic generic;
    /*
                SetBackColor( cDkPurple );
                // Object List
                ubyte numObjects;
                ubyte zeroes[2];
                ZBankPointer listOffset;
                if( listOffset.zb.bankNo == bankType ){
                    local uint64 returnTo = FTell();
                    FSeek(headerStart + listOffset.offset);
                    struct {
                        ushort objectId;
                    } ZObjectList[numObjects];
                    FSeek(returnTo);
                } else {
                    Warning("External Bank");
                }
                break;
                ubyte idk[7];
    */
                break;
    //            return "";
            case 0x0C:
                ZHC_Generic generic;
    /*
                SetBackColor( cLtPurple );
                ubyte idk[7];
    */
                break;
    //            return "Unused Environment Settings";
            case 0x0D:
                ZHC_Generic generic;
    /*
                SetBackColor( cAqua );
                // Pathways
                ubyte zeroes[3];
                ZBankPointer listOffset;
                if( listOffset.zb.bankNo == bankType ){
                    local uint64 returnTo = FTell();
                    FSeek(headerStart + listOffset.offset);
                    ZPathList paths;
                    FSeek(returnTo);
                } else {
                    Warning("External Bank");
                }
    */
                break;
    //            return "";
            case 0x0E:
                ZHC_TransitionActorList transitionActorList;
                break;
            case 0x0F:
                ZHC_EnvironmentList environmentList;
                break;
            case 0x10:
                ZHC_Time time;
                break;
            case 0x11:
                ZHC_Generic generic;
    /*
                SetBackColor( cDkYellow );
                // Skybox Settings
                //TODO: Inline cast and fog
                ubyte zeroes1[3];
                ubyte skyboxNumber; //TODO: Map known skyboxes
                ubyte zeroes2 : 4;
                ubyte cast : 4;
                //Affects the sun's lens flare, and skybox 1 will load sky/clouds.
                //0 = Sunny
                //1 = Cloudy
                ubyte zeroes3 : 4;
                ubyte fog : 4;
                ubyte zeroes4;
                //0  = None
                //1+ = A lot of fog.
    */
                break;
    //            return "";
            case 0x12:
                ZHC_Generic generic;
    /*
                SetBackColor( cLtYellow );
                // Skybox Modifier
                ubyte zeroes1[3];
                ubyte disableSkybox;
                //00 = skybox
                //01+= no skybox
                ubyte unknown;
                //01 = set in Z2_WITCH_SHOP_room_14
                ubyte zeroes2[2];
    */
                break;
    //            return "";
            case 0x13:
                ZHC_Generic generic;
    /*
                SetBackColor( cDkGray );
                ubyte idk[7];
    */
                break;
    //            return "Exit List";
            case 0x14:
                ZHC_Generic generic;
                breakout = 1;
                break;
            case 0x15:
                ZHC_Sound sound;
                break;
            case 0x16:
                ZHC_Generic generic;
    /*
                SetBackColor( cLtGray );
                // Sound Settings pt 2: Echo
                ubyte zeroes[6];
                ubyte echo;
    */
                break;
            case 0x17:
                ZHC_Cutscene cutscenes;
                ZHC_Generic generic;
    /*
                // Cutscenes
                local uint i;
                ubyte numCutscenes;
                ubyte zeroes[2];
                ZBankPointer listOffset;
                if( listOffset.zb.bankNo == bankType ){
                    local uint64 returnTo = FTell();
                    FSeek(headerStart + listOffset.offset);
                    //ZCutsceneHeader cutscenes(headerStart)[numCutscenes]<optimize=false>;
                    FSeek(returnTo);
                } else {
                    Warning("External Bank");
                }
    */
                break;
            case 0x18:
                ZHC_AltHeaderList altHeaderList;
    /*
                // "Alternate Headers";
                // points to all existing headers other than itself
                // Scenes, Not Optional
                
    */
                break;
            case 0x19:
                ZHC_Camera camera;
    /*

    */
                break;
    //            return "Camera Settings and World Map";
            case 0x1A:
                ZHC_Generic generic;
                //ZHC_Unknown1A unknown;
                break;
            case 0x1B:
                //ZHC_Generic generic;
                ZHC_Unknown1B unknown;
                break;
            case 0x1C:
                //ZHC_Generic generic;
                ZHC_Unknown1C unknown;
                break;
            case 0x1D:
                ZHC_Generic generic;
                //ZHC_Unknown1D unknown;
                break;
            case 0x1E:
                //ZHC_Generic generic;
                ZHC_Unknown1E unknown;
                break;
            default:
                ZHC_Generic generic;
        }; // switch()
        FSeek(hPos+8);

        if ( breakout == 1 ){
            break;
        }
        iters++;
    };
    SIEND;
} ZSceneHeader<read=ZSceneHeaderRead>; //typedef struct 

string ZSceneHeaderRead(ZSceneHeader &zshc){
    switch(zshc.commandType){
        case 0x00:
            return "Start Positions List";
        case 0x01:
            return "Actor List";
        case 0x02:
            return "MM:Cameras";
        case 0x03:
            return "Collision Header";
        case 0x04:
            return "Maps";
        case 0x05:
            return "Weather Info";
        case 0x06:
            return "Entrance List";
        case 0x07:
            return "Special Objects";
        case 0x08:
            return "Room Behavior";
        case 0x09:
            return "Unused Header Command";
        case 0x0A:
            return "Mesh Definition";
        case 0x0B:
            return "Object List";
        case 0x0C:
            return "Unused Environment Settings";
        case 0x0D:
            return "Pathways";
        case 0x0E:
            return "Transition Actor List";
        case 0x0F:
            return "Environment Settings";
        case 0x10:
            return "Time Settings";
        case 0x11:
            return "Skybox Settings";
        case 0x12:
            return "Skybox Modifier";
        case 0x13:
            return "Exit List";
        case 0x14:
            return "End Marker";
        case 0x15:
            return "Sound Settings";
        case 0x16:
            return "Sound Settings: Echo";
        case 0x17:
            return "Cutscenes";
        case 0x18:
            return "Alternate Headers";
        case 0x19:
            return "Camera Settings and World Map";
        default:
            local string s;
            SPrintf( s, "0x%LX? Header Command", zshc.commandType);
            return s;
    }
};