// -*- mode: c;-*-
/*
    COVERAGE (ITEMS DONE):
    InstrumentSetTable
    InstrumentSet

    ITEMS NOT DONE:
    InstrumentSetData
*/

typedef struct {
    SIBE;
    local uint64 i;
    /* 
    the value of Seek1 is valid relative to itself,
    wherein it points to a list of relative pointers
    */
    SIT;
    uint seek1;

    SIT;
    uint seek2;

    if(parentof(this).unknown1.bit2 || parentof(this).unknown1.bit4 || parentof(this).unknown1.bit6 || parentof(this).unknown1.bit8){
        AssertUIntGTZero(seek1, "InstrumentSetData->seek1");

        SAVE;
        FSeek( startof(this) + seek1 );
        if(!parentof(this).unknown1.bit2){
            ElusiveRecord1 er1(startof(this), parentof(this).sampleBank);
        } else {
            PercussionInstrument myInstruments(startof(this), parentof(this).sampleBank);
        }
        REST;
    }


    if(parentof(this).unknown1.bit4 || parentof(this).unknown1.bit6 || parentof(this).unknown1.bit8){
        AssertUIntGTZero(seek2, "InstrumentSetData->seek2 [non-drums do not blank]");
        SAVE;
        FSeek( startof(this) + seek2 );
        for( i = 0; i < numExtraInstrumentSamples; i++ ){
            InstrumentSample extraInstrumentSamples(startof(this), parentof(this).sampleBank);
        }
        REST;
    } else if(parentof(this).unknown1.bit2){
        AssertNumberEquals(seek2, 0, "InstrumentSetData->seek2 [drums should be blank]");
    }

    SIT;
    uint myInstrumentLocations[ parentof(this).numInstruments ];
    
    // iterate through all the instruments
    for( i = 0; i < parentof(this).numInstruments; i++ ){
        if( myInstrumentLocations[ i ] != 0 ){
            SAVE;
            FSeek( startof(this) + myInstrumentLocations[ i ] );
            //FSeek( AUDIOBANK + aBankOffset + myInstrumentLocations[ i ] );
            OtherInstrument myInstruments(startof(this), parentof(this).sampleBank);
            REST;
        } else {
            //AssertUIntGTZero( myInstrumentLocations[ i ], "InstrumentSetData->myInstrumentLocations[]" );
        }
    }
    SIEND;
} InstrumentSetData;

typedef struct {
    SIBE;
    SIT;
    uint offset; // relative to AUDIOBANK
    SIT;
    uint size;
    SIT;
    ubyte majorVersion;
    //AssertNumberEquals(majorVersion, 2, "InstrumentSet->majorVersion");
    SIT;
    ubyte minorVersion;
    AssertNumberInBetween(minorVersion, 0, 2, "InstrumentSet->minorVersion");
    SIT;
    ubyte sampleBank<comment="This corresponds with SampleTable->mySampRecords[#]">;
    AssertNumberInBetween(sampleBank, 0, sampleTable.numSamps, "InstrumentSet->sampleBank");
    SIT;
    ubyte unknown2;
    AssertNumberEquals(unknown2, 0xFF, "InstrumentSet->unknown2 (NOT PADDING!!!)");
    /*
    The third byte is an index for a list at 
    SAMPLES which gives the base address to load
    samples from. What is the purpose of this? Well
    apparently just to be a pain in the arse, 
    because taking these numbers and adding them to sample 
    pointers will load that sample perfectly if the index
    is changed to 1, which has a base address of zero and 
    is what most instrument sets use. Only four sets seem 
    to actually do this though, namely the:
    Deku Tree, Jabu-Jabu's belly, Goron City and the Spirit Temple.
    Super Mario 64 does something similar but it affects every single instrument set in the game.
    */
    //Number of instruments to be read (can be less than total but 
    // not greater, does not include percussion).
    SIT;
    ubyte numInstruments;
    AssertUIntGTZero(numInstruments, "InstrumentSet->numInstruments");
    SIT;
    BitEight unknown1;         // aa
    AssertNumberEquals(unknown1.bit1, 0, "InstrumentSet->unknown1->bit1");
    // AssertNumberEquals(unknown1.bit2, 0, "InstrumentSet->unknown1->bit2");
    AssertNumberEquals(unknown1.bit3, 0, "InstrumentSet->unknown1->bit3");
    //AssertNumberEquals(unknown1.bit4, 0, "InstrumentSet->unknown1->bit4");
    AssertNumberEquals(unknown1.bit5, 0, "InstrumentSet->unknown1->bit5");
    //AssertNumberEquals(unknown1.bit6, 0, "InstrumentSet->unknown1->bit6");
    AssertNumberEquals(unknown1.bit7, 0, "InstrumentSet->unknown1->bit7");
    //AssertNumberEquals(unknown1.bit8, 0, "InstrumentSet->unknown1->bit8");
    /*
    aa = a bitrange
    only bits 6 8 and 2 are used at any given time
    bit 2 handles percussion
        * dOoTMQ_E_debug
        * dMM_E_debug
    bit 4 is only ever set on the first record
        * dMM_E_debug
    bit 6 is only ever set on the first record
        * dOoTMQ_E_debug
    bit 8 is only ever set on the second record
        * dOoTMQ_E_debug
        * dMM_E_debug
    */

    SIT;
    ushort numExtraInstrumentSamples;

    /*
    foreach on the number of instruments
    */
    SAVE;
    FSeek( AUDIOBANK + offset );
    InstrumentSetData myData;
    REST;
    SIEND;
} InstrumentSet;

typedef struct {
    SIBE;
    SIT;
    ushort numInstrumentSets;
    SIT;
    ubyte  instrumentSetPadding[14];
    AssertUBytesNull( instrumentSetPadding, "instrumentSetPadding" );

    EXWarning("OPTIMIZE FIX: InstrumentSetTable->myInstrumentSets (InstrumentSet)");
    InstrumentSet myInstrumentSets[numInstrumentSets]<optimize=false>;
    SIEND;
} InstrumentSetTable;