// -*- mode: c;-*-
// TODO: Fix bitwise alignment sadness.
// TODO: Combine palette visualization lookup.
// TODO: Test out the jay peg, why not?
BitfieldDisablePadding();

// scaffolding
#include "filetypes/Bits.bt"
#include "filetypes/Texture/__init__.bt"
#include "scaffolds/__init__.bt"

uint64 scale(uint64 valueIn, uint64 baseMin, uint64 baseMax, uint64 limitMin){
    return ((limitMax - limitMin) * (valueIn - baseMin) / (baseMax - baseMin)) + limitMin;
}

/*
    technically, the following formats are incapable of rendering correctly:
    * i4
    * ia4
    due to every second unit not actually occupying space
    rendering it would require averaging the first and second item
*/

/*
Palettes uses rgb5a1 and are completely separate from the ci textures.
They are usually put after the texture itself, 
but the distance can vary a lot.
Multiple textures may share the same palette, and the palette may sometimes be part of an actual texture.
*/

#define icon_item_static 7651328
//rgba32 heh[32*32]<optimize=false>;

typedef struct(uint width, uint height){
    rgba32 pixesl[width * height]<optimize=false>;
} rgba32Images;

//FSeek(icon_item_static);
//rgba32Images imgs(32,32)[5A000h / 1000h]<optimize=false>;

//FSeek(icon_item_static + 1000h);

//ubyte end_heh;

// 

///* works
//FSeek(0x0074C000 + 0x0005BB00);
//i4 hotdog[48 * 48]<optimize=false>;
//*/

///* works
//FSeek(0x017F7000 + 0x00024C00);
//i8 the_legend_of[72 * 8]<optimize=false>;
//*/

///* works
//FSeek(0x0074C000 + 0x0005C1C0);
//ia4 top_left[16 * 16]<optimize=false>;
//*/

///* works
//FSeek(0x0074C000 + 0x0005A000);
//ia8 the_legend_of[48 * 48]<optimize=false>;
// cool note: data like this tends to spin if you gradually
// change the column width, which makes it a little easier to spot

// otherwise it's typically a bunch of nulls speckled with data that seems to
// interleaf two shapes together (halfs of bombs) at 16 bytes wide
//*/

//* works
//FSeek(0x01AA4000 + 0x00014200);
//ia16 end_button[44 * 16]<optimize=false>;
//*/

// works
//FSeek(0x01AEC000 + 0x00002600);
//rgb5a1 score_target[24 * 16]<optimize=false>;


///*
// 57 wide
//FSeek(0x027D6000 + 0x00024818);
//ci4 h00024818_64x64_ci4[64 * 64]<optimize=false>;
// pal lives at 0x00013D70
//*/

///* works
//FSeek(0x017F7000 + 0x00024C00);
//ci8 the_legend_of[72 * 8]<optimize=false>;
//*/

/*
x   i4
x   i8
x   ia4
x   ia8
x   ia16
~   rgb5a1
~   rgba16
x   rgba32
~   ci4
?   ci8
*/

/*
FSeek(0x027B0000 + 0x000006F0);
JFIF depth_test; // size 0x00025EF0
*/

//FSeek( 0x0354C000 + 0x0002E640 );
/*
FSeek( 0x03554E40 );
JFIF face_shop_room_0;
*/

/*
<directory name="vr_FCVR_static" address="0x01F9F000" size="0x00020000">
	<texture name="Happy Mask Shop 1" address="0x00000000" format="ci8" width="256" height="256" palette="0x00020000"/>
	<texture name="Happy Mask Shop 2" address="0x00010000" format="ci8" width="256" height="256" palette="0x00020200"/>
</directory>
*/
