// -*- mode: c;-*-
enum <uint> ENV_FOG {
    USE = ENV_FOG_USE,
    NONE = ENV_FOG_NONE
};

typedef struct {
    uint env_tag;
    Assert( env_tag == TAG_ENV, "Invalid NIFF_Env: Wrong Tag" );
    uint this_env_index;
    uint env_size;
    // @TODO: Validate against NameList
    uint env_name_index;
    // @TODO: Validate that item has name
    ENV_FOG fog;
    NIFF_Color fog_color;
    uint fog_near;
    uint fog_far;
    if( ReadUInt() != FILL_COLOR_NONE ){
        NIFF_FillColor fill_color;
    } else {
        uint fill_color<name="FILL_COLOR_NONE">;
    }
    if( ReadUInt() != FILL_DEPTH_NONE ){
        NIFF_FillColor fill_depth;
    } else {
        uint fill_depth<name="FILL_DEPTH_NONE">;
    }
    // @TODO: Validate against TexList
    if( ReadUInt() != BG_COLOR_IMG_NONE ){
        uint bg_sprite_img;
    } else {
        uint bg_sprite_img<name="BG_COLOR_IMG_NONE">;
    }
    // @TODO: Validate against TexList
    if( ReadUInt() != BG_DEPTH_IMG_NONE ){
        uint bg_depth_img;
    } else {
        uint bg_depth_img<name="BG_DEPTH_IMG_NONE">;
    }
    uint nintendo_extension_block_size;
    uint user_extension_block_size;
    if( nintendo_extension_block_size != NINTENDO_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic nintendoExtensionBlock(nintendo_extension_block_size);
    }
    if( user_extension_block_size != USER_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic userExtensionBlock(user_extension_block_size);
    }
} NIFF_Env;

typedef struct {
    uint env_list_tag;
    Assert( env_list_tag == TAG_ENV_LIST, "Invalid NIFF_EnvListHeader: Wrong Tag" );
    uint env_list_header_size;
    uint env_list_size;
    uint env_num;
    uint nintendo_extension_block_size;
    uint user_extension_block_size;
    uint env_num_byte[env_num];
} NIFF_EnvListHeader;

typedef struct {
    NIFF_EnvListHeader header;
    Assert( header.env_list_header_size == sizeof(header), "Invalid NIFF_EnvListHeader: Size Mismatch" );
    NIFF_Env envs[header.env_num]<optimize=false>;
    local uint64 i;
    local string warn;
    local string thisName;
    for( i = 0; i < header.env_num; i++ ){
        SPrintf( thisName, "Invalid NIFF_Env[%d]: ", i );

        SPrintf( warn, "%sSize Mismatch: Actual != Header", thisName );
        Assert( header.env_num_byte[i] == sizeof(envs[i]), warn );
        SPrintf( warn, "%sSize Mismatch: Actual != Internal", thisName );
        Assert( envs[i].env_size == sizeof(envs[i]), warn );
        SPrintf( warn, "%sSize Mismatch: Header != Internal", thisName );
        Assert( header.env_num_byte[i] == envs[i].env_size, warn );
        SPrintf( warn, "%sIndex Mismatch: Header != Internal", thisName );
        Assert( i == envs[i].this_env_index, warn );
    }
    if( header.nintendo_extension_block_size != NINTENDO_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic nintendoExtensionBlock(header.nintendo_extension_block_size);
    }
    if( header.user_extension_block_size != USER_EXT_BLOCK_NONE ){
        NIFF_XEB_Generic userExtensionBlock(header.user_extension_block_size);
    }
} NIFF_EnvList;