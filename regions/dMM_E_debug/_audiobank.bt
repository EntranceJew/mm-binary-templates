// -*- mode: c;-*-
typedef struct {
    uint start;
    uint end;
} ZRelativeOffset;

typedef struct(uint64 startPos, uint64 headStart){
    SetBackColor ( cDkGreen );

    char unknown[16];
} Unknown_2;

typedef struct(uint64 startPos, uint64 headStart){
    SetBackColor ( cGreen );

    uint unknown1;
    uint unknown2;
    uint64 unknown3;
} Unknown_4;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cDkPurple );

    uint head;
    Assert( head == 2, "SOMETHING ISN'T RIGHT");
    uint blockSize;
    ubyte data[blockSize * 32];
    ubyte zeroes[8];
} Unknown_5;

typedef struct (uint64 startPos, uint64 headStart) {
    SetBackColor ( cYellow );
    uint unknown1; // not an offset
    uint unknown2;
    uint uk4Off;
    uint uk5Off;

    local uint64 returnTo = FTell();
    FSeek( uk4Off + headStart );
    Unknown_4 uk4(uk4Off+headStart, headStart);
    FSeek( uk5Off + headStart );
    Unknown_5 uk5(uk5Off+headStart, headStart);
    FSeek(returnTo);
} Unknown_3;

typedef struct (uint64 startPos, uint64 headStart) {
    //FSeek( headStart + startPos );
    
    SetBackColor ( cLtBlue );
    uint maybeFlags;

    uint uk2Off;

    char unknown1[8];

    uint uk3Off;

    uint unknown2; // maybe flags???
    // originally said to be 8 bytes, might not be
    uint unknown3;
    uint unknown4;

    local uint64 returnTo = FTell();
    FSeek( uk2Off + headStart );
    Unknown_2 uk2(uk2Off+headStart, headStart);
    FSeek( uk3Off + headStart );
    Unknown_3 uk3(uk3Off+headStart, headStart);
    FSeek(returnTo);
} Unknown_1;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cLtPurple );
    uint mystery;
    uint mystery;
} Unknown_10;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cSilver );
    uint uk10Off;
    uint weirdbytes; 

    local uint64 returnTo = FTell();
    Printf("i am at 0x%Lx and I want to be at 0x%Lx", FTell(), (headStart + uk10Off));
    FSeek( headStart + uk10Off );
    Unknown_10 uk10(headStart+uk10Off, headStart);
    FSeek( returnTo );
} Unknown_9;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cLtRed );
    uint unknown1;
    uint uk9Off;
    uint unknown;
    uint zeroes;

    //local uint64 returnTo = FTell();
    //FSeek( headStart + uk9Off );
    //Unknown_9 uk9(headStart+uk9Off, headStart);
    //FSeek( returnTo );
} Unknown_8;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cDkAqua );
    uint unknown1; //my head mihgt explode
    uint unknown2; //what is heaven like

    uint uk8Off;
    uint unknown3;

    local uint64 returnTo = FTell();
    FSeek( headStart + uk8Off );
    Unknown_8 uk8(startPos, headStart);
    FSeek( returnTo );

    SetBackColor ( cNone );
} Unknown_7;

typedef struct(uint64 startPos, uint64 headStart) {
    SetBackColor ( cLtGreen );

    uint unknown1; // maybeFlags 0xD3(40/18/68)0000
    uint uk7Off; //god help me
    
    uint unknown2; // probably more flags
    uint unknown3; // 0x000062B0 this is the same as unkown purple

    local uint64 returnTo = FTell();
    FSeek( headStart + uk7Off );
    Unknown_7 uk7(headStart + uk7Off, headStart);
    FSeek( returnTo );
} Unknown_6;

typedef struct {
    uint offseek;
} MysteryOffsets;

typedef struct {
    uint what1;
    uint what2;
    uint what3;
    uint what4;
} HonkRecord;

typedef struct {
    uint what1;
    uint what2;
} WeirdRecord;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany, MysteryOffsets data[]){
    local uint i;
    local uint64 returnTo = FTell();
    for( i = 0; i < howMany; i++ ){
        if( data[i].offseek != 0 ){
            FSeek(data[i].offseek + headStart);
            Unknown_1 uk1(data[i].offseek+headStart, headStart);
            FSeek(returnTo);
        } else {
            Printf("Unknown_1 #%d did not link to anything: value == 0x%LX\n", i, data[i].offseek);
        }
    }
} Unknown_1_Container;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany, MysteryOffsets data[]){
    local uint i;
    local uint64 returnTo = FTell();
    for( i = 0; i < howMany; i++ ){
        if( data[i].offseek != 0 ){
            FSeek(data[i].offseek + headStart);
            Unknown_6 uk6(data[i].offseek+headStart, headStart);
            FSeek(returnTo);
        } else {
            Printf("Unknown_6 #%d did not link to anything: value == 0x%LX\n", i, data[i].offseek);
        }
    }
} Unknown_6_Container;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany, WeirdRecord data[]){
    local uint i;
    local uint64 returnTo = FTell();
    for( i = 0; i < howMany; i++ ){
        if( data[i].what1 != 0 ){
            FSeek(data[i].what1 + headStart);
            Unknown_9 uk9(data[i].what1+headStart, headStart);
            FSeek(returnTo);
        } else {
            Printf("Unknown_9 #%d did not link to anything: value == 0x%LX\n", i, data[i].offseek);
        }
    }
} Unknown_9_Container;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany) {
    SetBackColor ( cDkBlue );

    MysteryOffsets data[ howMany ];
    
    Unknown_1_Container uk1C(startPos, headStart, howMany, data);

} UnknownHeader1;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany) {
    FSeek(headStart + startPos);
    SetBackColor ( cBlue );

    MysteryOffsets data[ howMany ];
    
    Unknown_6_Container uk6C(startPos, headStart, howMany, data);
} UnknownHeader2;

typedef struct (uint64 startPos, uint64 headStart, uint64 howMany) {
    FSeek(headStart + startPos);
    SetBackColor ( cDkGray );

    WeirdRecord data[ howMany ];
    
    Unknown_9_Container uk9C(startPos, headStart, howMany, data);
} UnknownHeader3;

//00 00 26 70 3F 20 00 00 00 00 27 00 3F 20 00 00
FSeek(0x0002B2D0);
struct {
    local uint64 headStart = FTell();
    local uint64 returnTo;
    SetBackColor ( cDkRed );
    uint bankSeekStart;
    uint bankSeekEnd;

    local uint magicNumber = 122;
    returnTo = FTell();
    UnknownHeader1 ukH1(FTell(), headStart, magicNumber);
    FSeek(returnTo);

    local uint numToGet = (bankSeekEnd - bankSeekStart) / sizeof(MysteryOffsets);
    UnknownHeader2 ukH2(bankSeekStart, headStart, numToGet);

    FSeek(0x32520);
    SetBackColor ( cAqua );
    HonkRecord weirdRecords[16];

    //FSeek(0x32660);
    local uint jumpNo = 518;
    UnknownHeader3 ukH3(0x32660-headStart, headStart, jumpNo);
    //Unknown_9 uk9(FTell()+headStart, headStart)[518];
    /*
    struct {
        uint uk;
        ubyte stuff[4];
    } MoreWeirdRecords[518];
    */
} ZAudioBank;